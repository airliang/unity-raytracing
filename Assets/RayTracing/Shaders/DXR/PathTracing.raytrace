#include "TraceRay.hlsl"
#include "TracingDebug.hlsl"
RWTexture2D<float4> _Spectrums;
RWTexture2D<float4> _Output;
#pragma enable_d3d11_debug_symbols
//#pragma multi_compile _ _ENVIRONMENT_MAP_ENABLE
//#pragma max_recursion_depth 2

[shader("raygeneration")]
void MyRaygenShader()
{
    uint2 dispatchIdx = DispatchRaysIndex().xy;
    
    uint threadId = dispatchIdx.x + dispatchIdx.y * DispatchRaysDimensions().x;

    RNG rng = GetRNG(threadId);
    float3 color = 0;
    RayDesc rayDescriptor = GenerateRay(dispatchIdx, rng);
    if (_DebugView == 0)
    {
        float3 li = PathLi(rayDescriptor, threadId, dispatchIdx, rng);
        float3 radiance = li; 
        //third step: output the final radiance to texture
        float3 spectrum = _Spectrums[dispatchIdx];
        float t = 1.0f / _FrameIndex;
        float3 curSpectrum = lerp(spectrum, radiance, t);
        //spectrum.rgb += radiance;
        _Spectrums[dispatchIdx] = float4(curSpectrum, 1);
        color = curSpectrum;
    }
    else
    {
        color = TracingDebug(threadId, rayDescriptor, _DebugView, _RayConeGBuffer[dispatchIdx.xy], _CameraConeSpreadAngle, rng);
    }
    //color = curSpectrum;

    WriteRNG(threadId, rng);
    _Output[dispatchIdx] = float4(color, 1);
}

[shader("miss")]
void MissShader(inout PathPayload payLoad : SV_RayPayload)
{
    payLoad.hitResult = HIT_MISS;
}


