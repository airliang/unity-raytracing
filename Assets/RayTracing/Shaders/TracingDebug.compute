
// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

//#pragma multi_compile __ _ENVMAP_ENABLE
//#pragma multi_compile _ _UNIFORM_SAMPLE_LIGHT

#include "TracingDebug.hlsl"

//use the matrix to calculate the world space ray
uniform float2 rasterSize;

Texture2D<half2>  RayConeGBuffer;
RWTexture2D<half4> outputTexture;
//uniform float cameraConeSpreadAngle;
uniform int    bounces;
uniform int   queueSizeIndex;

CameraSample GetCameraSample(float2 pRaster, float2 u)
{
    CameraSample camSample;
    float2 filter = 0;
    camSample.pFilm = pRaster + float2(0.5, 0.5) + filter;
    return camSample;
}

Ray GenerateRay(uint2 id, inout RNG rng)
{
    float2 u = Get2D(rng);

    CameraSample cSample = GetCameraSample(float2(id.x, id.y), u); //rs.GetCameraSample(float2(id.x, id.y), _time);
    float3 pFilm = float3(cSample.pFilm, 0);
    float4 nearplanePoint = mul(RasterToCamera, float4(pFilm, 1));
    nearplanePoint /= nearplanePoint.w;
    float3 orig = float3(0, 0, 0);
    float3 direction = normalize(nearplanePoint.xyz);

    Ray ray;
    ray.orig = mul(CameraToWorld, float4(orig, 1)).xyz;
    ray.direction = mul(CameraToWorld, float4(direction, 0)).xyz;
    ray.tmax = FLT_MAX;
    ray.tmin = 0;
    return ray;
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= (uint)rasterSize.x || id.y >= (uint)rasterSize.y)
        return;

    int threadId = id.x + id.y * rasterSize.x;
    RNG rng = GetRNG(threadId);
    Ray ray = GenerateRay(id.xy, rng);
    //Interaction isect = (Interaction)0;//Intersections[threadId];
    
    float3 color = TracingDebug(id.xy, ray, debugView, RayConeGBuffer[id.xy], cameraConeSpreadAngle, rng);
    outputTexture[id.xy] = half4(color, 1);
    WriteRNG(threadId, rng);
}
