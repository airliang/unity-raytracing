#include "TraceRay.hlsl"

RWTexture2D<float4> _Spectrums;
RWTexture2D<float4> _Output;
#pragma enable_d3d11_debug_symbols
//#pragma max_recursion_depth 2

[shader("raygeneration")]
void MyRaygenShader()
{
    uint2 dispatchIdx = DispatchRaysIndex().xy;
    
    uint threadId = dispatchIdx.x + dispatchIdx.y * DispatchRaysDimensions().x;

    RNG rng = GetRNG(threadId);
    RayDesc rayDescriptor = GenerateRay(dispatchIdx, rng);

    float3 li = PathLi(rayDescriptor, dispatchIdx, rng);
    float3 radiance = li; 
    //third step: output the final radiance to texture
    float3 spectrum = _Spectrums[dispatchIdx];
    float t = 1.0f / _FrameIndex;
    float3 curSpectrum = lerp(spectrum, radiance, t);
    //spectrum.rgb += radiance;
    _Spectrums[dispatchIdx] = float4(curSpectrum, 1);
    //color = curSpectrum;

    WriteRNG(threadId, rng);
    _Output[dispatchIdx] = float4(curSpectrum, 1);
}

[shader("miss")]
void MissShader(inout PathPayload payLoad : SV_RayPayload)
{
    payLoad.hitResult = HIT_MISS;
    //rayIntersection.color = float4(0.0f, 0.0f, 0.0f, 1.0f);
}


